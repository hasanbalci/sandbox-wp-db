name: On Pull Request

on:
  workflow_dispatch: 
    inputs:
      manual-pr-number:
        description: 'PR Number'
        required: true
        default: '10'
  #pull_request:
    #paths:
    #  - '**/*.gpml'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: false # to allow multiple runs to queue up rather than clobber

jobs:
  # Retrieves PR number and creates a GITHUB_OUTPUT environment variable that can accessed by subsequent jobs.
  get-pr:
    runs-on: ubuntu-latest
    outputs:
      pr-number:  ${{ steps.get-pr.outputs.pr-number }}
    steps:
      - name: Get PR
        id: get-pr
        run: | #Get PR from triggering event, unless provided via manual run
          if [ -z "${{ inputs.manual-pr-number }}" ]; then
            echo "pr-number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "pr-number=${{ inputs.manual-pr-number }}" >> $GITHUB_OUTPUT
          fi
  # Retrieves GPML file and branch name, then creates GITHUB_OUTPUT environment variables that can accessed by subsequent jobs:
  get-gpml:
    needs: [get-pr]
    if: ${{ needs.get-pr.outputs.pr-number }}
    runs-on: ubuntu-latest
    outputs:
      gpml-file: ${{ steps.get-gpml.outputs.gpml-file }}
      branch-name: ${{ steps.get-branch.outputs.branch-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ needs.get-pr.outputs.pr-number }}/head  

      - name: Get GPML
        id: get-gpml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          GPML_FILE=$(gh pr view ${{ needs.get-pr.outputs.pr-number }} --json files --jq '.files.[].path' | grep '.gpml$')
          echo "Found GPML file: $GPML_FILE"
          echo "GPML_FILE=$GPML_FILE" >> "$GITHUB_ENV"
          echo "gpml-file=$GPML_FILE" >> $GITHUB_OUTPUT 

      - name: Install XML processing tools
        run: sudo apt-get install -y libxml2-utils
        
      - name: Check GPML file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GPML: $GPML_FILE"
          wpid="$(basename ""$GPML_FILE"" | sed 's/.gpml//')"
          org="$(xmllint --xpath 'string(//*[local-name()="Pathway"]/@Organism)' "$GPML_FILE")"  
          name="$(xmllint --xpath 'string(//*[local-name()="Pathway"]/@Name)' "$GPML_FILE")" 
          desc="$(xmllint --xpath 'string(//*[local-name()="Comment" and @Source="WikiPathways-description"])' "$GPML_FILE")"

          # Start PR description
          NEW_DESCRIPTION="
          ## Pathway Information

          **WPID**: $wpid
          **TITLE**: $name
          **ORGANISM**: $org
          **DESCRIPTION**: $desc
        
          ---
          "
          PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
          gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"
          
      - name: Get branch name
        id: get-branch
        run: |
          BRANCH_NAME=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{needs.get-pr.outputs.pr-number}} \
            | jq -r .head.ref)
          echo "branch-name=$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          if ! git ls-remote --heads origin $BRANCH_NAME; then
            git push origin HEAD:refs/heads/$BRANCH_NAME
          fi

  metadata:
    needs: [get-pr,get-gpml]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{needs.get-pr.outputs.pr-number}}/head

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache meta-data-action with dependencies
        uses: actions/cache@v3
        id: cacheMetaJar
        with:
          path: ./meta-data-action-1.1.2-jar-with-dependencies.jar
          key: cached-meta-data-action-${{ hashFiles('meta-data-action-1.1.2-jar-with-dependencies.jar') }}
          restore-keys: |
            cached-meta-data-action-${{ hashFiles('meta-data-action-1.1.2-jar-with-dependencies.jar') }}
            cached-meta-data-action-
    
      - name: Install deps
        run: |
          echo "Refreshing cached-meta-data-action"
          if [ ! -e ./meta-data-action-1.1.2-jar-with-dependencies.jar ]; then
            wget -O meta-data-action-1.1.2-jar-with-dependencies.jar https://github.com/wikipathways/meta-data-action/releases/download/v1.1.2/meta-data-action-1.1.2-jar-with-dependencies.jar
          fi

      - name: Cache and install dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ github.workspace }}/Hs_Derby_Ensembl_108.bridge
          key: ${{ runner.os }}-java-Hs_Derby_Ensembl_108
          restore-keys: |
            ${{ runner.os }}-java-Hs_Derby_Ensembl_108
            ${{ runner.os }}-java-Hs_Derby_Ensembl_
                
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Install deps
        run: |
          cd "${{ github.workspace }}"
          if [ ! -e ./Hs_Derby_Ensembl_108.bridge ]; then
            wget -O Hs_Derby_Ensembl_108.bridge https://zenodo.org/record/7781913/files/Hs_Derby_Ensembl_108.bridge?download=1
          fi

      - name: Generate gdb.config, fileNames.config, and fileDownloads.config
        run: |
          for f in ${{needs.changed-gpmls.outputs.gpml-file}}; do
            scripts/meta-data-action/configGenerator.sh $f
          done
          
      - name: Cache all bridge files
        uses: actions/cache@v3
        id: cacheAllBridge
        with:
          path: |
            ./metabolites*.bridge
            ./Ag*.bridge
            ./An*.bridge
            ./At*.bridge
            ./Bs*.bridge
            ./Bt*.bridge
            ./Ce*.bridge
            ./Cf*.bridge
            ./Ci*.bridge
            ./Dr*.bridge
            ./Da*.bridge
            ./Dp*.bridge
            ./Dm*.bridge
            ./Ec*.bridge
            ./Gg*.bridge
            ./Fg*.bridge
            ./Gm*.bridge
            ./Hs*.bridge
            ./Hv*.bridge
            ./Ml*.bridge
            ./Mm*.bridge
            ./Mx*.bridge
            ./Oa*.bridge
            ./Ova*.bridge
            ./Oi*.bridge
            ./Oj*.bridge
            ./Pi*.bridge
            ./Pt*.bridge
            ./Qc*.bridge
            ./Rn*.bridge
            ./Sc*.bridge
            ./Sl*.bridge
            ./Ss*.bridge
            ./Vv*.bridge
            ./Xt*.bridge
            ./Zm*.bridge
          key: cached-bridge-files
          restore-keys: |
            cached-bridge-files
            
      - if: steps.cacheAllBridge.outputs.cache-hit != 'true'
        name: Install all bridge files
        run: |
          echo "Cache not found: cached-bridge-files"
          declare -a OrganismNames=("Metabolites" "Anopheles gambiae" "Aspergillus niger" "Arabidopsis thaliana" "Bacillus subtilis" "Bos taurus" "Caenorhabditis elegans" "Canis familiaris" "Ciona intestinalis" "Danio rerio" "Daphnia magna" "Daphnia pulex" "Drosophila melanogaster" "Escherichia coli" "Gallus gallus" "Fusarium graminearum"  "Glycine max" "Homo sapiens" "Hordeum vulgare" "Macaca mulatta" "Mus musculus" "Mycobacterium tuberculosis" "Ornithorhynchus anatinus" "Ovis aries" "Oryza indica" "Oryza japonica" "Populus trichocarpa" "Pan troglodytes" "Equus caballus" "Rattus norvegicus" "Saccharomyces cerevisiae" "Solanum lycopersicum" "Sus scrofa" "Vitis vinifera" "Xenopus tropicalis" "Zea mays")
          for org in "${OrganismNames[@]}"; do
            echo "generating configuration files for "$org""
            scripts/meta-data-action/configGenerator.sh "$org"
            echo "installing bridgedb files for "$org""
            scripts/meta-data-action/installDependencies.sh "$org"
          done

      - name: Generate configs, install bridgeDb, generate info and tsv files
        run: |
          chmod 777 meta-data-action-1.1.2-jar-with-dependencies.jar
          f=${{ needs.get-gpml.outputs.gpml-file }}
          echo "value of f "$f""
          org="$(sed -n '/<Pathway /s/.*Organism=\(.*\)[^\n]*/\1/p' $f | tr -d '"' | tr -d '>' | tr -d '\r')"  
          echo "generating configuration files for "$org""
          scripts/meta-data-action/configGenerator.sh "$org"
          wpid="$(basename ""$f"" | sed 's/.gpml//')"
          cat gdb.config
          echo "generating info and datanode files for $wpid, organism "$org""
          java -jar meta-data-action-1.1.2-jar-with-dependencies.jar local "$f" $(date --utc +%F) gdb.config "$org"
          mkdir ./artifacts
          mv pathways/"$wpid"/"$wpid"-info.json artifacts/.
          mv pathways/"$wpid"/"$wpid"*.tsv artifacts/.
      
      - name: Upload info as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: info.json
          path: artifacts/WP*info.json
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name: Upload datanode as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: datanodes.tsv
          path: artifacts/WP*datanodes.tsv
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name: Upload refs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: refs.tsv
          path: artifacts/WP*refs.tsv
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name: Report on meta-data-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify generated files 
          infojson=$(find . -path "./artifacts/WP*info.json" -print -quit)
          dntsv=$(find . -path "./artifacts/WP*datanodes.tsv" -print -quit)
          refstsv=$(find . -path "./artifacts/WP*refs.tsv" -print -quit)

          # Update PR description
          PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
          CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q ".body")
          NEW_DESCRIPTION="$CURRENT_DESCRIPTION
          ## Generate Metadata Files
          "
          if [[ -n $infojson ]]; then
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [x] info.json generated"
          else
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [] info.json generated"          
          fi
          if [[ -n $dntsv ]]; then
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [x] datanodes.tsv generated"
          else
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [] datanodes.tsv generated"          
          fi
          if [[ -n $refstsv ]]; then
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [x] refs.tsv generated"
          else
            NEW_DESCRIPTION="$NEW_DESCRIPTION
            - [] refs.tsv generated"          
          fi
          gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"

  pubmed:
    if: false
    needs: [get-pr,get-gpml,metadata]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{needs.get-pr.outputs.pr-number}}/head
    
    - name: Run generate-references
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TODO: Run generate-references and attach output TSV to PR"

        # Update PR description
        PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
        CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q ".body")
        NEW_DESCRIPTION="$CURRENT_DESCRIPTION
        - [x] references.tsv generated
        "
        gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"

  frontmatter:
    if: false
    needs: [get-pr,get-gpml,pubmed]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{needs.get-pr.outputs.pr-number}}/head
    
    - name: Run create_pathway_frontmatter.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TODO: Run create_pathway_frontmatter.py and attach output MD to PR"

        # Update PR description
        PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
        CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q ".body")
        NEW_DESCRIPTION="$CURRENT_DESCRIPTION
        - [x] .md generated
        "
        gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"

  json-svg:
    if: false
    needs: [get-pr,get-gpml,frontmatter]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{needs.get-pr.outputs.pr-number}}/head
    
    - name: Run generate-svgs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TODO: Run generate-svgs and attach output JSON, SVG and PNG to PR"

        # Update PR description
        PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
        CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q ".body")
        NEW_DESCRIPTION="$CURRENT_DESCRIPTION
        - [x] .json generated
        - [x] .svg generated
        - [x] .png generated

        *TODO: insert PNG here*
        "
        gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"


  testing:
    if: false
    needs: [get-pr,get-gpml,json-svg]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{needs.get-pr.outputs.pr-number}}/head
    
    - name: Perform automatic test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # TODO: perform testing
        
        # Update PR description
        PR_NUMBER=${{needs.get-pr.outputs.pr-number}}
        CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q ".body")
        NEW_DESCRIPTION="$CURRENT_DESCRIPTION
        
        ---
        ## Automated Testing
        *As table*
        | # | Test name | Link | Notes | Result |
        |---|---|---|---|---|
        | 1 | Test one | | | \$\${\color{green}PASS}\$\$ |
        | 2 | Test two | | | \$\${\color{red}FAIL}\$\$ |
        | 3 | Test three | | | \$\${\color{green}PASS}\$\$ |

        *As checklist*
        - [ ] Interactions are connected
        - [ ] Datanodes are annotated with database references
        - [ ] Decription, consisting of 2-3 sentence overview of processes described in the pathway
        - [ ] At least one literature reference
        - [ ] At least one pathway ontology term
        - [ ] Pathway title conforms to the [guidelines](https://github.com/wikipathways/wikipathways-faq/discussions/24)
        ---
        "
        gh pr edit $PR_NUMBER --body "$NEW_DESCRIPTION"
